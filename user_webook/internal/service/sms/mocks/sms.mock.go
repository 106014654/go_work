// Code generated by MockGen. DO NOT EDIT.
// Source: user_webook/internal/service/sms/type.go

// Package smsmocks is a generated GoMock package.
package smsmocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSMSService is a mock of SMSService interface.
type MockSMSService struct {
	ctrl     *gomock.Controller
	recorder *MockSMSServiceMockRecorder
}

// MockSMSServiceMockRecorder is the mock recorder for MockSMSService.
type MockSMSServiceMockRecorder struct {
	mock *MockSMSService
}

// NewMockSMSService creates a new mock instance.
func NewMockSMSService(ctrl *gomock.Controller) *MockSMSService {
	mock := &MockSMSService{ctrl: ctrl}
	mock.recorder = &MockSMSServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMSService) EXPECT() *MockSMSServiceMockRecorder {
	return m.recorder
}

// SendCode mocks base method.
func (m *MockSMSService) SendCode(ctx context.Context, biz, phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCode", ctx, biz, phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCode indicates an expected call of SendCode.
func (mr *MockSMSServiceMockRecorder) SendCode(ctx, biz, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCode", reflect.TypeOf((*MockSMSService)(nil).SendCode), ctx, biz, phone)
}
