// Code generated by MockGen. DO NOT EDIT.
// Source: user_webook/internal/service/code.go

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCodeServiceInter is a mock of CodeServiceInter interface.
type MockCodeServiceInter struct {
	ctrl     *gomock.Controller
	recorder *MockCodeServiceInterMockRecorder
}

// MockCodeServiceInterMockRecorder is the mock recorder for MockCodeServiceInter.
type MockCodeServiceInterMockRecorder struct {
	mock *MockCodeServiceInter
}

// NewMockCodeServiceInter creates a new mock instance.
func NewMockCodeServiceInter(ctrl *gomock.Controller) *MockCodeServiceInter {
	mock := &MockCodeServiceInter{ctrl: ctrl}
	mock.recorder = &MockCodeServiceInterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeServiceInter) EXPECT() *MockCodeServiceInterMockRecorder {
	return m.recorder
}

// SendCode mocks base method.
func (m *MockCodeServiceInter) SendCode(ctx context.Context, biz, phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCode", ctx, biz, phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCode indicates an expected call of SendCode.
func (mr *MockCodeServiceInterMockRecorder) SendCode(ctx, biz, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCode", reflect.TypeOf((*MockCodeServiceInter)(nil).SendCode), ctx, biz, phone)
}

// Verify mocks base method.
func (m *MockCodeServiceInter) Verify(ctx context.Context, biz, phone, inputCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, biz, phone, inputCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockCodeServiceInterMockRecorder) Verify(ctx, biz, phone, inputCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCodeServiceInter)(nil).Verify), ctx, biz, phone, inputCode)
}
