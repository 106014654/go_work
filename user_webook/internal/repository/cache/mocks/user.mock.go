// Code generated by MockGen. DO NOT EDIT.
// Source: user_webook/internal/repository/cache/user.go

// Package cachemocks is a generated GoMock package.
package cachemocks

import (
	context "context"
	domain "go_work/user_webook/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserCacheInter is a mock of UserCacheInter interface.
type MockUserCacheInter struct {
	ctrl     *gomock.Controller
	recorder *MockUserCacheInterMockRecorder
}

// MockUserCacheInterMockRecorder is the mock recorder for MockUserCacheInter.
type MockUserCacheInterMockRecorder struct {
	mock *MockUserCacheInter
}

// NewMockUserCacheInter creates a new mock instance.
func NewMockUserCacheInter(ctrl *gomock.Controller) *MockUserCacheInter {
	mock := &MockUserCacheInter{ctrl: ctrl}
	mock.recorder = &MockUserCacheInterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCacheInter) EXPECT() *MockUserCacheInterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUserCacheInter) Get(ctx context.Context, id int64) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserCacheInterMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserCacheInter)(nil).Get), ctx, id)
}

// Set mocks base method.
func (m *MockUserCacheInter) Set(ctx context.Context, u domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockUserCacheInterMockRecorder) Set(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockUserCacheInter)(nil).Set), ctx, u)
}
