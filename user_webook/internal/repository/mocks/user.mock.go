// Code generated by MockGen. DO NOT EDIT.
// Source: user_webook/internal/repository/user.go

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	domain "go_work/user_webook/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepositoryRepInter is a mock of UserRepositoryRepInter interface.
type MockUserRepositoryRepInter struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryRepInterMockRecorder
}

// MockUserRepositoryRepInterMockRecorder is the mock recorder for MockUserRepositoryRepInter.
type MockUserRepositoryRepInterMockRecorder struct {
	mock *MockUserRepositoryRepInter
}

// NewMockUserRepositoryRepInter creates a new mock instance.
func NewMockUserRepositoryRepInter(ctrl *gomock.Controller) *MockUserRepositoryRepInter {
	mock := &MockUserRepositoryRepInter{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryRepInterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryRepInter) EXPECT() *MockUserRepositoryRepInterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepositoryRepInter) Create(ctx context.Context, u domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryRepInterMockRecorder) Create(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepositoryRepInter)(nil).Create), ctx, u)
}

// EditByUserId mocks base method.
func (m *MockUserRepositoryRepInter) EditByUserId(ctx context.Context, u domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditByUserId", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditByUserId indicates an expected call of EditByUserId.
func (mr *MockUserRepositoryRepInterMockRecorder) EditByUserId(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditByUserId", reflect.TypeOf((*MockUserRepositoryRepInter)(nil).EditByUserId), ctx, u)
}

// FindByEmail mocks base method.
func (m *MockUserRepositoryRepInter) FindByEmail(ctx context.Context, email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepositoryRepInterMockRecorder) FindByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepositoryRepInter)(nil).FindByEmail), ctx, email)
}

// FindById mocks base method.
func (m *MockUserRepositoryRepInter) FindById(ctx context.Context, id int64) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserRepositoryRepInterMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserRepositoryRepInter)(nil).FindById), ctx, id)
}

// FindByUserId mocks base method.
func (m *MockUserRepositoryRepInter) FindByUserId(ctx context.Context, id int64) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockUserRepositoryRepInterMockRecorder) FindByUserId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockUserRepositoryRepInter)(nil).FindByUserId), ctx, id)
}
